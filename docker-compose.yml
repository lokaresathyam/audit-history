version: "2.6"

# Reusable Constants
x-mongo-connection-data:
  &mongo-connection-data
  environment:
    - MONGODB_ROOT_USERNAME=root
    - MONGODB_ROOT_PASSWORD=root

x-mongo-spring-connection-data:
  &mongo-spring-connection-data
  environment:
    - SPRING_DATA_MONGO_HOST=172.20.0.3
    - SPRING_DATA_MONGO_PORT=27017
    - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
    - SPRING_DATA_MONGO_DATABASE=local
    - SPRING_DATA_MONGO_USERNAME=root
    - SPRING_DATA_MONGO_PASSWORD=root

networks:
  mynetwork:
    ipam:
      config:
        - subnet: 172.20.0.0/24

services:
  mongo:
    image: bitnami/mongodb:latest
    networks:
      mynetwork:
        ipv4_address: 172.20.0.3
    ports:
      - 27017:27017
    <<: *mongo-connection-data

  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    networks:
      mynetwork:
        ipv4_address: 172.20.0.4
    ports:
      - "2181:2181"
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    networks:
      mynetwork:
        ipv4_address: 172.20.0.5
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    links:
      - zookeeper:zookeeper

  mongo-express:
    image: mongo-express
    networks:
      mynetwork:
        ipv4_address: 172.20.0.6
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo
    links:
      - mongo:mongo
    restart: unless-stopped

  audit-history-producer:
    networks:
      mynetwork:
        ipv4_address: 172.20.0.7
    ports:
      - 8080:8080
    build:
      context: ./audit-history-producer
      dockerfile: ./Dockerfile
    image: audit-history-producer
    container_name: audit-history-producer
    depends_on:
      - mongo
      - kafka
    restart: always
    links:
      - kafka:kafka
    environment:
      AUDIT_PRODUCER_PORT: 8080
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: 172.20.0.5:9092
      SPRING_KAFKA_PRODUCER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_DESERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      SPRING_DATA_MONGO_HOST: 172.20.0.3
      SPRING_DATA_MONGO_PORT: 27017
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_DATA_MONGO_DATABASE: local
      SPRING_DATA_MONGO_USERNAME: root
      SPRING_DATA_MONGO_PASSWORD: root


  audit-history-consumer:
    networks:
      mynetwork:
        ipv4_address: 172.20.0.8
    ports:
      - 8082:8082
    build:
      context: ./audit-history-consumer
      dockerfile: ./Dockerfile
    image: audit-history-consumer
    container_name: audit-history-consumer
    depends_on:
      - mongo
      - kafka
    restart: always
    links:
      - kafka:kafka
    environment:
      AUDIT_CONSUMER_PORT: 8082
      SPRING_KAFKA_CONSUMER_GROUP_ID: group_id
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: 172.20.0.5:9092
      SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer

